#!/bin/sh
### BEGIN INIT INFO
# Provides:          dse
# Required-Start:    $remote_fs $network $named $time
# Required-Stop:     $remote_fs $network $named $time
# Should-Start:      ntp mdadm
# Should-Stop:       ntp mdadm
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: DataStax Enterprise
# Description:       The DataStax Enterprise server.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

DESC="DSE daemon"
NAME=dse

# enable this to start Hadoop's JobTracker and/or TaskTrackers on this machine.
# If left disabled, this will act as a regular Cassandra node.
HADOOP_ENABLED=0

# enable this to set the replication factor for CFS.  Note that this will only
# have an effect the first time a cluster is started with HADOOP_ENABLED=1 and
# after that will be a no-op. Defaults to 1.
#CFS_REPLICATION_FACTOR=1

# enable this to start Solr search indexing on this machine.  If left disabled,
# this will act as a regular Cassandra node.
SOLR_ENABLED={{dse_solr}}

# enable thist to start Spark integration. If left disabled, this
# will act as a regular Cassandra node.
SPARK_ENABLED={{dse_spark}}

# enabled this to start CFS; it is required only if you want to start CFS without
# Hadoop/Spark trackers.
CFS_ENABLED=0

# Set this to your install location and remove the leading hashsign
export DSE_HOME=/opt/datastax/dse/dse-{{store.active_version}}

# Location of log output
OUTPUT_FILE="/var/log/cassandra/output.log"

# Set the PID file location here
PIDFILE=/var/run/$NAME/$NAME.pid

# Ths user to use for the service
CASSANDRA_USER=cassandra

. /lib/lsb/init-functions

# limits
ulimit -n {{limits.nofile}}
ulimit -l {{limits.memlock}}
ulimit -p {{limits.as}}


OPTIONS='cassandra'

if [ "$SPARK_ENABLED" = "1" ]; then
	log_message "Enabling Spark Analytics"
	OPTIONS=${OPTIONS}' -k'
fi
if [ "$SOLR_ENABLED" = "1" ]; then
	log_message "Enabling Solr Search"
	OPTIONS=${OPTIONS}' -s'
fi

PIDDIR=`dirname $PIDFILE`
if [ ! -d "$PIDDIR" ]; then
    mkdir -p "$PIDDIR"
    if [ ! -d "$PIDDIR" ]; then
        log_message_failure "$PIDDIR can not be found. Please create and make writable for user: $CASSANDRA_USER"
        exit 5
    fi
fi
owner=`stat -c %U "$PIDDIR"`
if [ "$owner" != "$CASSANDRA_USER" ]; then
    chown -R $CASSANDRA_USER "$PIDDIR"
    owner=`stat -c %U "$PIDDIR"`
    if [ "$owner" != "$CASSANDRA_USER" ]; then
        log_message_failure "$PIDDIR is not owned by user: $CASSANDRA_USER. Please change ownership."
        exit 5
    fi
fi


case "$1" in
    start)
    log_daemon_msg "Starting $DSEC"
    start-stop-daemon -S  -v -c $CASSANDRA_USER -x "$DSE_HOME/bin/dse" -d "$DSE_HOME/bin" -p $PIDFILE -- $OPTIONS -p $PIDFILE >> $OUTPUT_FILE
      log_end_msg $?
      log_daemon_msg "Waiting for CQL Port.."
      while ! nc -z `hostname` 9042
      do
        sleep 2
      done
    ;;

    stop)
     log_daemon_msg "Stopping $DSEC"
     su - cassandra -c ". ~/.profile;nodetool drain" >/dev/null 2>&1
     start-stop-daemon -K -d $DSE_HOME -p $PIDFILE -R TERM/30/KILL/5
     log_end_msg $?
    ;;

    restart)
     log_daemon_msg "Restarting $DSEC"
     su - cassandra -c ". ~/.profile;nodetool drain" >/dev/null 2>&1
     start-stop-daemon -K -d $DSE_HOME -p $PIDFILE -R TERM/30/KILL/5
     start-stop-daemon -S  -v -c $CASSANDRA_USER -x "$DSE_HOME/bin/dse" -d "$DSE_HOME/bin" -p $PIDFILE -- $OPTIONS -p $PIDFILE >>$OUTPUT_FILE
     log_end_msg $?
     log_daemon_msg "Waiting for CQL Port.."
     while ! nc -z `hostname` 9042
     do
       sleep 2
     done
    ;;

    status)
    ;;

    *)
    echo "Usage: /etc/init.d/udev {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
